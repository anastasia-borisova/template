{"ast":null,"code":"import { getToken, getCategories, getPlaylists } from \"./api\";\nexport { artistsToString, createMarkup, setToken, getPlaylistsByCategories, checkToken };\n/**\r\n* Вспомогальная функция для преобразования массива с именами исполнителей в строку\r\n* @param artists - массив с именами исполнителей\r\n* @returns строку с именами исполнителей через запятую\r\n*/\n\nfunction artistsToString(artists) {\n  return artists.map(artist => artist.name).join(', ');\n}\n/**\r\n * Функция для создания из строки объекта, который можно будет преобразовать в html \r\n * в атрибуте dangerouslySetInnerHTML\r\n * @param str строка, которая может содержать html \r\n * @returns объект с ключом __html и строкой\r\n */\n\n\nfunction createMarkup(str) {\n  return {\n    __html: str\n  };\n}\n/**\r\n * Функция получает токен доступа и его время жизни и добавляет их в локальное хранилище\r\n */\n\n\nasync function setToken() {\n  const token = await getToken();\n\n  if (token.error) {\n    localStorage.clear();\n  } else {\n    localStorage.setItem('token', token.access_token);\n    localStorage.setItem('time', (token.expires_in * 1000 + Date.now()).toString());\n  }\n}\n/**\r\n * Функция получает токен, если он еще не был получен или вышло его время жизни\r\n */\n\n\nfunction checkToken() {\n  if (!localStorage.getItem('token') || Date.now() >= parseInt(localStorage.getItem('time') || '')) setToken();\n}\n/**\r\n * Функция создает массив объектов, которые состоят из названия категории плейлистов и массива плейлистов\r\n * @param showAllCategories если параметр равен true, то в массив добавляются все категории плейлистов, \r\n * иначе добавляются первые пять категорий\r\n * @returns массив объектов, которые состоят из названия категории плейлистов и массива плейлистов\r\n */\n\n\nasync function getPlaylistsByCategories(showAllCategories) {\n  checkToken();\n  const token = localStorage.getItem('token');\n\n  if (token) {\n    const categories = await getCategories(token);\n    let end = 5;\n    if (showAllCategories) end = categories.length;\n    const playlistsByCategory = [];\n\n    for (let i = 0; i < end; i++) {\n      const playlists = await getPlaylists(token, categories[i].id);\n\n      if (playlists && playlists.length > 0) {\n        playlistsByCategory.push({\n          name: categories[i].name,\n          playlists: playlists\n        });\n      }\n    }\n\n    return playlistsByCategory;\n  }\n}","map":{"version":3,"sources":["C:/Users/anast/tensor/template/src/utils/helpers.tsx"],"names":["getToken","getCategories","getPlaylists","artistsToString","createMarkup","setToken","getPlaylistsByCategories","checkToken","artists","map","artist","name","join","str","__html","token","error","localStorage","clear","setItem","access_token","expires_in","Date","now","toString","getItem","parseInt","showAllCategories","categories","end","length","playlistsByCategory","i","playlists","id","push"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,aAAnB,EAAkCC,YAAlC,QAAsD,OAAtD;AACA,SAASC,eAAT,EAA0BC,YAA1B,EAAwCC,QAAxC,EAAkDC,wBAAlD,EAA4EC,UAA5E;AAEA;AACA;AACA;AACA;AACA;;AACA,SAASJ,eAAT,CAAyBK,OAAzB,EAAyC;AACrC,SAAOA,OAAO,CAACC,GAAR,CAAaC,MAAD,IAAYA,MAAM,CAACC,IAA/B,EAAqCC,IAArC,CAA0C,IAA1C,CAAP;AACH;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASR,YAAT,CAAsBS,GAAtB,EAAmC;AAC/B,SAAO;AAACC,IAAAA,MAAM,EAAED;AAAT,GAAP;AACH;AAED;AACA;AACA;;;AACA,eAAeR,QAAf,GAA0B;AACtB,QAAMU,KAAK,GAAG,MAAMf,QAAQ,EAA5B;;AACA,MAAGe,KAAK,CAACC,KAAT,EAAgB;AACdC,IAAAA,YAAY,CAACC,KAAb;AACD,GAFD,MAGK;AACHD,IAAAA,YAAY,CAACE,OAAb,CAAqB,OAArB,EAA8BJ,KAAK,CAACK,YAApC;AACAH,IAAAA,YAAY,CAACE,OAAb,CAAqB,MAArB,EAA6B,CAACJ,KAAK,CAACM,UAAN,GAAmB,IAAnB,GAA0BC,IAAI,CAACC,GAAL,EAA3B,EAAuCC,QAAvC,EAA7B;AACD;AACJ;AAED;AACA;AACA;;;AACA,SAASjB,UAAT,GAAsB;AAClB,MAAG,CAACU,YAAY,CAACQ,OAAb,CAAqB,OAArB,CAAD,IAAkCH,IAAI,CAACC,GAAL,MAAcG,QAAQ,CAACT,YAAY,CAACQ,OAAb,CAAqB,MAArB,KAAgC,EAAjC,CAA3D,EACEpB,QAAQ;AACb;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,eAAeC,wBAAf,CAAwCqB,iBAAxC,EAAoE;AAChEpB,EAAAA,UAAU;AACV,QAAMQ,KAAK,GAAGE,YAAY,CAACQ,OAAb,CAAqB,OAArB,CAAd;;AACA,MAAGV,KAAH,EAAU;AACV,UAAMa,UAAU,GAAG,MAAM3B,aAAa,CAACc,KAAD,CAAtC;AACA,QAAIc,GAAG,GAAG,CAAV;AACA,QAAGF,iBAAH,EACEE,GAAG,GAAGD,UAAU,CAACE,MAAjB;AACF,UAAMC,mBAAmB,GAAG,EAA5B;;AACA,SAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGH,GAAnB,EAAwBG,CAAC,EAAzB,EAA6B;AAC3B,YAAMC,SAAS,GAAG,MAAM/B,YAAY,CAACa,KAAD,EAAQa,UAAU,CAACI,CAAD,CAAV,CAAcE,EAAtB,CAApC;;AACA,UAAGD,SAAS,IAAIA,SAAS,CAACH,MAAV,GAAmB,CAAnC,EAAsC;AACpCC,QAAAA,mBAAmB,CAACI,IAApB,CAAyB;AAAExB,UAAAA,IAAI,EAAEiB,UAAU,CAACI,CAAD,CAAV,CAAcrB,IAAtB;AAA4BsB,UAAAA,SAAS,EAAGA;AAAxC,SAAzB;AACD;AACF;;AACD,WAAOF,mBAAP;AACC;AACJ","sourcesContent":["import { getToken, getCategories, getPlaylists } from \"./api\";\r\nexport { artistsToString, createMarkup, setToken, getPlaylistsByCategories, checkToken }\r\n\r\n/**\r\n* Вспомогальная функция для преобразования массива с именами исполнителей в строку\r\n* @param artists - массив с именами исполнителей\r\n* @returns строку с именами исполнителей через запятую\r\n*/\r\nfunction artistsToString(artists: any[]) {\r\n    return artists.map((artist) => artist.name).join(', ');\r\n}\r\n\r\n/**\r\n * Функция для создания из строки объекта, который можно будет преобразовать в html \r\n * в атрибуте dangerouslySetInnerHTML\r\n * @param str строка, которая может содержать html \r\n * @returns объект с ключом __html и строкой\r\n */\r\nfunction createMarkup(str: string) {\r\n    return {__html: str};\r\n}\r\n\r\n/**\r\n * Функция получает токен доступа и его время жизни и добавляет их в локальное хранилище\r\n */\r\nasync function setToken() {\r\n    const token = await getToken();\r\n    if(token.error) {\r\n      localStorage.clear();\r\n    }\r\n    else {\r\n      localStorage.setItem('token', token.access_token);\r\n      localStorage.setItem('time', (token.expires_in * 1000 + Date.now()).toString());\r\n    }\r\n}\r\n\r\n/**\r\n * Функция получает токен, если он еще не был получен или вышло его время жизни\r\n */\r\nfunction checkToken() {\r\n    if(!localStorage.getItem('token') || Date.now() >= parseInt(localStorage.getItem('time') || ''))\r\n      setToken();\r\n}\r\n\r\n/**\r\n * Функция создает массив объектов, которые состоят из названия категории плейлистов и массива плейлистов\r\n * @param showAllCategories если параметр равен true, то в массив добавляются все категории плейлистов, \r\n * иначе добавляются первые пять категорий\r\n * @returns массив объектов, которые состоят из названия категории плейлистов и массива плейлистов\r\n */\r\nasync function getPlaylistsByCategories(showAllCategories: boolean) {\r\n    checkToken();\r\n    const token = localStorage.getItem('token');\r\n    if(token) {\r\n    const categories = await getCategories(token);\r\n    let end = 5;\r\n    if(showAllCategories)\r\n      end = categories.length;\r\n    const playlistsByCategory = [];\r\n    for(let i = 0; i < end; i++) {\r\n      const playlists = await getPlaylists(token, categories[i].id);\r\n      if(playlists && playlists.length > 0) {\r\n        playlistsByCategory.push({ name: categories[i].name, playlists : playlists });\r\n      }  \r\n    }\r\n    return playlistsByCategory;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"export { getCategories, getToken, getPlaylists, search };\n\nclass Options {\n  /**\r\n   * Класс для создания дополнительных настроек запроса\r\n   * \r\n   * @constructor\r\n   * @this {Options}\r\n   * @param {string} token - токен доступа\r\n   */\n  constructor(token) {\n    this.token = void 0;\n    this.token = token;\n  }\n  /**\r\n   * Создает дополнительные настройки для GET запросов, включает в себя заголовки \r\n   * Authorization и Content-Type\r\n   * @this {Options}\r\n   * @returns объект с дополнительными настройками для GET запросов\r\n  */\n\n\n  getOptions() {\n    return {\n      method: 'GET',\n      headers: {\n        'Authorization': 'Bearer ' + this.token,\n        'Content-Type': 'application/json'\n      }\n    };\n  }\n  /**\r\n   * Создает дополнительные настройки для POST запросов, включает в себя заголовки \r\n   * Authorization и Content-Type и тело запроса \r\n   * @this {Options}\r\n   * @returns объект с дополнительными настройками для POST запросов\r\n  */\n\n\n  postOptions(client_id, client_secret) {\n    return {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        'Authorization': 'Basic ' + btoa(client_id + ':' + client_secret)\n      },\n      body: 'grant_type=client_credentials'\n    };\n  }\n\n}\n/**\r\n * Функция для выполнения запросов к api\r\n * При возникновении ошибки в консоль выводится сообщение\r\n * @param {string} url - адрес, по которому выполняется запрос\r\n * @param {object} init - дополнительные параметры для настройки запроса\r\n * @returns ответ на запрос в формате json\r\n */\n\n\nasync function queryToApi(url, init) {\n  try {\n    const response = await fetch(url, init);\n    if (!response.ok) throw new Error(`Error ${response.status}`);else {\n      const json = await response.json();\n      return json;\n    }\n  } catch (error) {\n    console.log(error.message);\n  }\n}\n/**\r\n * Функция для получения токена доступа \r\n * @returns объект, содержащий токен доступа и время его жизни\r\n*/\n\n\nasync function getToken() {\n  const client_id = 'cc54ff5069b04ecbb4cf473f445e9872';\n  const client_secret = '5a84d500c04542fe87ca70dee98313fc';\n  const url = 'https://accounts.spotify.com/api/token';\n  const options = new Options();\n  const response = await queryToApi(url, options.postOptions(client_id, client_secret));\n  return response;\n}\n/**\r\n * Функция для получения категорий плейлистов Spotify\r\n * @param {string} token - токен доступа\r\n * @returns массив категорий плейлистов Spotify\r\n */\n\n\nasync function getCategories(token) {\n  const url = 'https://api.spotify.com/v1/browse/categories?limit=10&country=US';\n  const options = new Options(token);\n  const response = await queryToApi(url, options.getOptions());\n  if (response !== null && response !== void 0 && response.categories) return response.categories.items;\n}\n/**\r\n* Функция для получения плейлистов по идентификатору категории\r\n* @param {string} token - токен доступа\r\n* @param {string} category_id - категория плейлиста\r\n* @returns массив плейлистов, входящих в категорию category_id\r\n*/\n\n\nasync function getPlaylists(token, category_id) {\n  const url = `https://api.spotify.com/v1/browse/categories/${category_id}/playlists?limit=10&country=US`;\n  const options = new Options(token);\n  const response = await queryToApi(url, options.getOptions());\n  if (response !== null && response !== void 0 && response.playlists) return response.playlists.items;\n}\n/**\r\n* Функция для получения альбомов, исполнителей и треков, соответствующих поисковому запросу\r\n* @param {string} token - токен доступа \r\n* @param {string} searchQuery - поисковый запрос\r\n* @returns объект, содержащий альбомы, исполнителей и треки, которые соответствуют поисковому запросу\r\n*/\n\n\nasync function search(token, searchQuery) {\n  const url = `https://api.spotify.com/v1/search?q=${searchQuery}&type=album,artist,track`;\n  const options = new Options(token);\n  const response = await queryToApi(url, options.getOptions());\n  return response;\n}","map":{"version":3,"sources":["C:/Users/anast/tensor/template/src/utils/api.tsx"],"names":["getCategories","getToken","getPlaylists","search","Options","constructor","token","getOptions","method","headers","postOptions","client_id","client_secret","btoa","body","queryToApi","url","init","response","fetch","ok","Error","status","json","error","console","log","message","options","categories","items","category_id","playlists","searchQuery"],"mappings":"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","sourcesContent":["export { getCategories, getToken, getPlaylists, search }\r\n\r\nclass Options {\r\n  /**\r\n   * Класс для создания дополнительных настроек запроса\r\n   * \r\n   * @constructor\r\n   * @this {Options}\r\n   * @param {string} token - токен доступа\r\n   */\r\n  token: string; \r\n\r\n  constructor(token?: string) {\r\n    this.token = token;\r\n  }\r\n\r\n  /**\r\n   * Создает дополнительные настройки для GET запросов, включает в себя заголовки \r\n   * Authorization и Content-Type\r\n   * @this {Options}\r\n   * @returns объект с дополнительными настройками для GET запросов\r\n  */\r\n  getOptions(): object {\r\n    return {\r\n      method: 'GET',\r\n      headers: { \r\n        'Authorization' : 'Bearer ' + this.token,\r\n        'Content-Type' : 'application/json',\r\n      }\r\n    };\r\n  }\r\n  /**\r\n   * Создает дополнительные настройки для POST запросов, включает в себя заголовки \r\n   * Authorization и Content-Type и тело запроса \r\n   * @this {Options}\r\n   * @returns объект с дополнительными настройками для POST запросов\r\n  */\r\n  postOptions(client_id: string, client_secret: string): object {\r\n    return {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/x-www-form-urlencoded',\r\n        'Authorization': 'Basic ' + btoa(client_id + ':' + client_secret)\r\n      },\r\n      body: 'grant_type=client_credentials'\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Функция для выполнения запросов к api\r\n * При возникновении ошибки в консоль выводится сообщение\r\n * @param {string} url - адрес, по которому выполняется запрос\r\n * @param {object} init - дополнительные параметры для настройки запроса\r\n * @returns ответ на запрос в формате json\r\n */\r\nasync function queryToApi(url: string, init: object): Promise<any> {\r\n  try {\r\n    const response = await fetch(url, init);\r\n    if(!response.ok)\r\n        throw new Error(`Error ${response.status}`);\r\n    else {\r\n      const json = await response.json();\r\n      return json;\r\n    }\r\n  }\r\n  catch(error) {\r\n    console.log(error.message);\r\n  }\r\n}\r\n\r\n/**\r\n * Функция для получения токена доступа \r\n * @returns объект, содержащий токен доступа и время его жизни\r\n*/\r\nasync function getToken(): Promise<any> {\r\n  const client_id = 'cc54ff5069b04ecbb4cf473f445e9872';\r\n  const client_secret = '5a84d500c04542fe87ca70dee98313fc';\r\n  const url = 'https://accounts.spotify.com/api/token';\r\n  const options = new Options();\r\n  const response = await queryToApi(url, options.postOptions(client_id, client_secret));\r\n  return response;\r\n}\r\n\r\n/**\r\n * Функция для получения категорий плейлистов Spotify\r\n * @param {string} token - токен доступа\r\n * @returns массив категорий плейлистов Spotify\r\n */\r\nasync function getCategories(token: string): Promise<any> {\r\n  const url = 'https://api.spotify.com/v1/browse/categories?limit=10&country=US';\r\n  const options = new Options(token);\r\n  const response = await queryToApi(url, options.getOptions());\r\n  if(response?.categories)\r\n    return response.categories.items;\r\n}\r\n\r\n/**\r\n* Функция для получения плейлистов по идентификатору категории\r\n* @param {string} token - токен доступа\r\n* @param {string} category_id - категория плейлиста\r\n* @returns массив плейлистов, входящих в категорию category_id\r\n*/\r\nasync function getPlaylists(token: string, category_id: string): Promise<any> {\r\n  const url = `https://api.spotify.com/v1/browse/categories/${category_id}/playlists?limit=10&country=US`;\r\n  const options = new Options(token);\r\n  const response = await queryToApi(url, options.getOptions());\r\n  if(response?.playlists)\r\n    return response.playlists.items;\r\n}\r\n\r\n/**\r\n* Функция для получения альбомов, исполнителей и треков, соответствующих поисковому запросу\r\n* @param {string} token - токен доступа \r\n* @param {string} searchQuery - поисковый запрос\r\n* @returns объект, содержащий альбомы, исполнителей и треки, которые соответствуют поисковому запросу\r\n*/\r\nasync function search(token: string, searchQuery: string): Promise<any> {\r\n  const url = `https://api.spotify.com/v1/search?q=${searchQuery}&type=album,artist,track`;\r\n  const options = new Options(token);\r\n  const response = await queryToApi(url, options.getOptions());\r\n  return response;\r\n}"]},"metadata":{},"sourceType":"module"}